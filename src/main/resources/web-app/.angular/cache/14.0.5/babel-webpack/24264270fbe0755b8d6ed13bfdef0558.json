{"ast":null,"code":"import { getRelationships } from '../xml/xlsx.js';\n/**\r\n * Returns sheet file paths.\r\n * Seems that the correct place to look for the `sheetId` -> `filename` mapping\r\n * is `xl/_rels/workbook.xml.rels` file.\r\n * https://github.com/tidyverse/readxl/issues/104\r\n * @param  {string} content — `xl/_rels/workbook.xml.rels` file contents.\r\n * @param  {object} xml\r\n * @return {object}\r\n */\n\nexport default function parseFilePaths(content, xml) {\n  // Example:\n  // <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n  //   ...\n  //   <Relationship\n  //     Id=\"rId3\"\n  //     Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\"\n  //     Target=\"worksheets/sheet1.xml\"/>\n  // </Relationships>\n  var document = xml.createDocument(content);\n  var filePaths = {\n    sheets: {},\n    sharedStrings: undefined,\n    styles: undefined\n  };\n\n  var addFilePathInfo = function addFilePathInfo(relationship) {\n    var filePath = relationship.getAttribute('Target');\n    var fileType = relationship.getAttribute('Type');\n\n    switch (fileType) {\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles':\n        filePaths.styles = getFilePath(filePath);\n        break;\n\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings':\n        filePaths.sharedStrings = getFilePath(filePath);\n        break;\n\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet':\n        filePaths.sheets[relationship.getAttribute('Id')] = getFilePath(filePath);\n        break;\n    }\n  };\n\n  getRelationships(document).forEach(addFilePathInfo); // Seems like \"sharedStrings.xml\" is not required to exist.\n  // For example, when the spreadsheet doesn't contain any strings.\n  // https://github.com/catamphetamine/read-excel-file/issues/85\n  // if (!filePaths.sharedStrings) {\n  //   throw new Error('\"sharedStrings.xml\" file not found in the *.xlsx file')\n  // }\n\n  return filePaths;\n}\n\nfunction getFilePath(path) {\n  // Normally, `path` is a relative path inside the ZIP archive,\n  // like \"worksheets/sheet1.xml\", or \"sharedStrings.xml\", or \"styles.xml\".\n  // There has been one weird case when file path was an absolute path,\n  // like \"/xl/worksheets/sheet1.xml\" (specifically for sheets):\n  // https://github.com/catamphetamine/read-excel-file/pull/95\n  // Other libraries (like `xlsx`) and software (like Google Docs)\n  // seem to support such absolute file paths, so this library does too.\n  if (path[0] === '/') {\n    return path.slice('/'.length);\n  } // // Seems like a path could also be a URL.\n  // // http://officeopenxml.com/anatomyofOOXML-xlsx.php\n  // if (/^[a-z]+\\:\\/\\//.test(path)) {\n  //   return path\n  // }\n\n\n  return 'xl/' + path;\n}","map":{"version":3,"names":["getRelationships","parseFilePaths","content","xml","document","createDocument","filePaths","sheets","sharedStrings","undefined","styles","addFilePathInfo","relationship","filePath","getAttribute","fileType","getFilePath","forEach","path","slice","length"],"sources":["C:/Users/Elfar/Desktop/tik/Codingias/src/main/resources/web-app/node_modules/read-excel-file/modules/read/parseFilePaths.js"],"sourcesContent":["import { getRelationships } from '../xml/xlsx.js';\n/**\r\n * Returns sheet file paths.\r\n * Seems that the correct place to look for the `sheetId` -> `filename` mapping\r\n * is `xl/_rels/workbook.xml.rels` file.\r\n * https://github.com/tidyverse/readxl/issues/104\r\n * @param  {string} content — `xl/_rels/workbook.xml.rels` file contents.\r\n * @param  {object} xml\r\n * @return {object}\r\n */\n\nexport default function parseFilePaths(content, xml) {\n  // Example:\n  // <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n  //   ...\n  //   <Relationship\n  //     Id=\"rId3\"\n  //     Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\"\n  //     Target=\"worksheets/sheet1.xml\"/>\n  // </Relationships>\n  var document = xml.createDocument(content);\n  var filePaths = {\n    sheets: {},\n    sharedStrings: undefined,\n    styles: undefined\n  };\n\n  var addFilePathInfo = function addFilePathInfo(relationship) {\n    var filePath = relationship.getAttribute('Target');\n    var fileType = relationship.getAttribute('Type');\n\n    switch (fileType) {\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles':\n        filePaths.styles = getFilePath(filePath);\n        break;\n\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings':\n        filePaths.sharedStrings = getFilePath(filePath);\n        break;\n\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet':\n        filePaths.sheets[relationship.getAttribute('Id')] = getFilePath(filePath);\n        break;\n    }\n  };\n\n  getRelationships(document).forEach(addFilePathInfo); // Seems like \"sharedStrings.xml\" is not required to exist.\n  // For example, when the spreadsheet doesn't contain any strings.\n  // https://github.com/catamphetamine/read-excel-file/issues/85\n  // if (!filePaths.sharedStrings) {\n  //   throw new Error('\"sharedStrings.xml\" file not found in the *.xlsx file')\n  // }\n\n  return filePaths;\n}\n\nfunction getFilePath(path) {\n  // Normally, `path` is a relative path inside the ZIP archive,\n  // like \"worksheets/sheet1.xml\", or \"sharedStrings.xml\", or \"styles.xml\".\n  // There has been one weird case when file path was an absolute path,\n  // like \"/xl/worksheets/sheet1.xml\" (specifically for sheets):\n  // https://github.com/catamphetamine/read-excel-file/pull/95\n  // Other libraries (like `xlsx`) and software (like Google Docs)\n  // seem to support such absolute file paths, so this library does too.\n  if (path[0] === '/') {\n    return path.slice('/'.length);\n  } // // Seems like a path could also be a URL.\n  // // http://officeopenxml.com/anatomyofOOXML-xlsx.php\n  // if (/^[a-z]+\\:\\/\\//.test(path)) {\n  //   return path\n  // }\n\n\n  return 'xl/' + path;\n}\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,gBAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,GAAjC,EAAsC;EACnD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,QAAQ,GAAGD,GAAG,CAACE,cAAJ,CAAmBH,OAAnB,CAAf;EACA,IAAII,SAAS,GAAG;IACdC,MAAM,EAAE,EADM;IAEdC,aAAa,EAAEC,SAFD;IAGdC,MAAM,EAAED;EAHM,CAAhB;;EAMA,IAAIE,eAAe,GAAG,SAASA,eAAT,CAAyBC,YAAzB,EAAuC;IAC3D,IAAIC,QAAQ,GAAGD,YAAY,CAACE,YAAb,CAA0B,QAA1B,CAAf;IACA,IAAIC,QAAQ,GAAGH,YAAY,CAACE,YAAb,CAA0B,MAA1B,CAAf;;IAEA,QAAQC,QAAR;MACE,KAAK,4EAAL;QACET,SAAS,CAACI,MAAV,GAAmBM,WAAW,CAACH,QAAD,CAA9B;QACA;;MAEF,KAAK,mFAAL;QACEP,SAAS,CAACE,aAAV,GAA0BQ,WAAW,CAACH,QAAD,CAArC;QACA;;MAEF,KAAK,+EAAL;QACEP,SAAS,CAACC,MAAV,CAAiBK,YAAY,CAACE,YAAb,CAA0B,IAA1B,CAAjB,IAAoDE,WAAW,CAACH,QAAD,CAA/D;QACA;IAXJ;EAaD,CAjBD;;EAmBAb,gBAAgB,CAACI,QAAD,CAAhB,CAA2Ba,OAA3B,CAAmCN,eAAnC,EAnCmD,CAmCE;EACrD;EACA;EACA;EACA;EACA;;EAEA,OAAOL,SAAP;AACD;;AAED,SAASU,WAAT,CAAqBE,IAArB,EAA2B;EACzB;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;IACnB,OAAOA,IAAI,CAACC,KAAL,CAAW,IAAIC,MAAf,CAAP;EACD,CAVwB,CAUvB;EACF;EACA;EACA;EACA;;;EAGA,OAAO,QAAQF,IAAf;AACD"},"metadata":{},"sourceType":"module"}