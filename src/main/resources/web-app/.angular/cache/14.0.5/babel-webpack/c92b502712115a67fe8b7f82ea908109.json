{"ast":null,"code":"import parseDate from './parseDate.js';\nimport isDateTimestamp from './isDateTimestamp.js'; // Parses a string `value` of a cell.\n\nexport default function parseCellValue(value, type, _ref) {\n  var getInlineStringValue = _ref.getInlineStringValue,\n      getInlineStringXml = _ref.getInlineStringXml,\n      getStyleId = _ref.getStyleId,\n      styles = _ref.styles,\n      values = _ref.values,\n      properties = _ref.properties,\n      options = _ref.options;\n\n  if (!type) {\n    // Default cell type is \"n\" (numeric).\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\n    type = 'n';\n  } // Available Excel cell types:\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n  //\n  // Some other document (seems to be old):\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\n  //\n\n\n  switch (type) {\n    // XLSX tends to store all strings as \"shared\" (indexed) ones\n    // using \"s\" cell type (for saving on strage space).\n    // \"str\" cell type is then generally only used for storing\n    // formula-pre-calculated cell values.\n    case 'str':\n      value = parseString(value, options);\n      break;\n    // Sometimes, XLSX stores strings as \"inline\" strings rather than \"shared\" (indexed) ones.\n    // Perhaps the specification doesn't force it to use one or another.\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"inlineStr\"><is><t>Test 123</t></is></c></row></sheetData>`.\n\n    case 'inlineStr':\n      value = getInlineStringValue();\n\n      if (value === undefined) {\n        throw new Error(\"Unsupported \\\"inline string\\\" cell value structure: \".concat(getInlineStringXml()));\n      }\n\n      value = parseString(value, options);\n      break;\n    // XLSX tends to store string values as \"shared\" (indexed) ones.\n    // \"Shared\" strings is a way for an Excel editor to reduce\n    // the file size by storing \"commonly used\" strings in a dictionary\n    // and then referring to such strings by their index in that dictionary.\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"s\"><v>0</v></c></row></sheetData>`.\n\n    case 's':\n      // If a cell has no value then there's no `<c/>` element for it.\n      // If a `<c/>` element exists then it's not empty.\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\n      var sharedStringIndex = Number(value);\n\n      if (isNaN(sharedStringIndex)) {\n        throw new Error(\"Invalid \\\"shared\\\" string index: \".concat(value));\n      }\n\n      if (sharedStringIndex >= values.length) {\n        throw new Error(\"An out-of-bounds \\\"shared\\\" string index: \".concat(value));\n      }\n\n      value = values[sharedStringIndex];\n      value = parseString(value, options);\n      break;\n    // Boolean (TRUE/FALSE) values are stored as either \"1\" or \"0\"\n    // in cells of type \"b\".\n\n    case 'b':\n      if (value === '1') {\n        value = true;\n      } else if (value === '0') {\n        value = false;\n      } else {\n        throw new Error(\"Unsupported \\\"boolean\\\" cell value: \".concat(value));\n      }\n\n      break;\n    // XLSX specification seems to support cells of type \"z\":\n    // blank \"stub\" cells that should be ignored by data processing utilities.\n\n    case 'z':\n      value = undefined;\n      break;\n    // XLSX specification also defines cells of type \"e\" containing a numeric \"error\" code.\n    // It's not clear what that means though.\n    // They also wrote: \"and `w` property stores its common name\".\n    // It's unclear what they meant by that.\n\n    case 'e':\n      value = decodeError(value);\n      break;\n    // XLSX supports date cells of type \"d\", though seems like it (almost?) never\n    // uses it for storing dates, preferring \"n\" numeric timestamp cells instead.\n    // The value of a \"d\" cell is supposedly a string in \"ISO 8601\" format.\n    // I haven't seen an XLSX file having such cells.\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"d\"><v>2021-06-10T00:47:45.700Z</v></c></row></sheetData>`.\n\n    case 'd':\n      if (value === undefined) {\n        break;\n      }\n\n      var parsedDate = new Date(value);\n\n      if (isNaN(parsedDate)) {\n        throw new Error(\"Unsupported \\\"date\\\" cell value: \".concat(value));\n      }\n\n      value = parsedDate;\n      break;\n    // Numeric cells have type \"n\".\n\n    case 'n':\n      if (value === undefined) {\n        break;\n      }\n\n      var parsedNumber = Number(value);\n\n      if (isNaN(parsedNumber)) {\n        throw new Error(\"Invalid \\\"numeric\\\" cell value: \".concat(value));\n      }\n\n      value = parsedNumber; // XLSX does have \"d\" type for dates, but it's not commonly used.\n      // Instead, it prefers using \"n\" type for storing dates as timestamps.\n\n      if (isDateTimestamp(value, getStyleId(), styles, options)) {\n        // Parse the number as a date timestamp.\n        value = parseDate(value, properties);\n      }\n\n      break;\n\n    default:\n      throw new TypeError(\"Cell type not supported: \".concat(type));\n  } // Convert empty values to `null`.\n\n\n  if (value === undefined) {\n    value = null;\n  }\n\n  return value;\n} // Decodes numeric error code to a string code.\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n\nfunction decodeError(errorCode) {\n  // While the error values are determined by the application,\n  // the following are some example error values that could be used:\n  switch (errorCode) {\n    case 0x00:\n      return '#NULL!';\n\n    case 0x07:\n      return '#DIV/0!';\n\n    case 0x0F:\n      return '#VALUE!';\n\n    case 0x17:\n      return '#REF!';\n\n    case 0x1D:\n      return '#NAME?';\n\n    case 0x24:\n      return '#NUM!';\n\n    case 0x2A:\n      return '#N/A';\n\n    case 0x2B:\n      return '#GETTING_DATA';\n\n    default:\n      // Such error code doesn't exist. I made it up.\n      return \"#ERROR_\".concat(errorCode);\n  }\n}\n\nfunction parseString(value, options) {\n  // In some weird cases, a developer might want to disable\n  // the automatic trimming of all strings.\n  // For example, leading spaces might express a tree-like hierarchy.\n  // https://github.com/catamphetamine/read-excel-file/pull/106#issuecomment-1136062917\n  if (options.trim !== false) {\n    value = value.trim();\n  }\n\n  if (value === '') {\n    value = undefined;\n  }\n\n  return value;\n}","map":{"version":3,"names":["parseDate","isDateTimestamp","parseCellValue","value","type","_ref","getInlineStringValue","getInlineStringXml","getStyleId","styles","values","properties","options","parseString","undefined","Error","concat","sharedStringIndex","Number","isNaN","length","decodeError","parsedDate","Date","parsedNumber","TypeError","errorCode","trim"],"sources":["C:/Users/Elfar/Desktop/tik/Codingias/src/main/resources/web-app/node_modules/read-excel-file/modules/read/parseCellValue.js"],"sourcesContent":["import parseDate from './parseDate.js';\nimport isDateTimestamp from './isDateTimestamp.js'; // Parses a string `value` of a cell.\n\nexport default function parseCellValue(value, type, _ref) {\n  var getInlineStringValue = _ref.getInlineStringValue,\n      getInlineStringXml = _ref.getInlineStringXml,\n      getStyleId = _ref.getStyleId,\n      styles = _ref.styles,\n      values = _ref.values,\n      properties = _ref.properties,\n      options = _ref.options;\n\n  if (!type) {\n    // Default cell type is \"n\" (numeric).\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\n    type = 'n';\n  } // Available Excel cell types:\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n  //\n  // Some other document (seems to be old):\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\n  //\n\n\n  switch (type) {\n    // XLSX tends to store all strings as \"shared\" (indexed) ones\n    // using \"s\" cell type (for saving on strage space).\n    // \"str\" cell type is then generally only used for storing\n    // formula-pre-calculated cell values.\n    case 'str':\n      value = parseString(value, options);\n      break;\n    // Sometimes, XLSX stores strings as \"inline\" strings rather than \"shared\" (indexed) ones.\n    // Perhaps the specification doesn't force it to use one or another.\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"inlineStr\"><is><t>Test 123</t></is></c></row></sheetData>`.\n\n    case 'inlineStr':\n      value = getInlineStringValue();\n\n      if (value === undefined) {\n        throw new Error(\"Unsupported \\\"inline string\\\" cell value structure: \".concat(getInlineStringXml()));\n      }\n\n      value = parseString(value, options);\n      break;\n    // XLSX tends to store string values as \"shared\" (indexed) ones.\n    // \"Shared\" strings is a way for an Excel editor to reduce\n    // the file size by storing \"commonly used\" strings in a dictionary\n    // and then referring to such strings by their index in that dictionary.\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"s\"><v>0</v></c></row></sheetData>`.\n\n    case 's':\n      // If a cell has no value then there's no `<c/>` element for it.\n      // If a `<c/>` element exists then it's not empty.\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\n      var sharedStringIndex = Number(value);\n\n      if (isNaN(sharedStringIndex)) {\n        throw new Error(\"Invalid \\\"shared\\\" string index: \".concat(value));\n      }\n\n      if (sharedStringIndex >= values.length) {\n        throw new Error(\"An out-of-bounds \\\"shared\\\" string index: \".concat(value));\n      }\n\n      value = values[sharedStringIndex];\n      value = parseString(value, options);\n      break;\n    // Boolean (TRUE/FALSE) values are stored as either \"1\" or \"0\"\n    // in cells of type \"b\".\n\n    case 'b':\n      if (value === '1') {\n        value = true;\n      } else if (value === '0') {\n        value = false;\n      } else {\n        throw new Error(\"Unsupported \\\"boolean\\\" cell value: \".concat(value));\n      }\n\n      break;\n    // XLSX specification seems to support cells of type \"z\":\n    // blank \"stub\" cells that should be ignored by data processing utilities.\n\n    case 'z':\n      value = undefined;\n      break;\n    // XLSX specification also defines cells of type \"e\" containing a numeric \"error\" code.\n    // It's not clear what that means though.\n    // They also wrote: \"and `w` property stores its common name\".\n    // It's unclear what they meant by that.\n\n    case 'e':\n      value = decodeError(value);\n      break;\n    // XLSX supports date cells of type \"d\", though seems like it (almost?) never\n    // uses it for storing dates, preferring \"n\" numeric timestamp cells instead.\n    // The value of a \"d\" cell is supposedly a string in \"ISO 8601\" format.\n    // I haven't seen an XLSX file having such cells.\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"d\"><v>2021-06-10T00:47:45.700Z</v></c></row></sheetData>`.\n\n    case 'd':\n      if (value === undefined) {\n        break;\n      }\n\n      var parsedDate = new Date(value);\n\n      if (isNaN(parsedDate)) {\n        throw new Error(\"Unsupported \\\"date\\\" cell value: \".concat(value));\n      }\n\n      value = parsedDate;\n      break;\n    // Numeric cells have type \"n\".\n\n    case 'n':\n      if (value === undefined) {\n        break;\n      }\n\n      var parsedNumber = Number(value);\n\n      if (isNaN(parsedNumber)) {\n        throw new Error(\"Invalid \\\"numeric\\\" cell value: \".concat(value));\n      }\n\n      value = parsedNumber; // XLSX does have \"d\" type for dates, but it's not commonly used.\n      // Instead, it prefers using \"n\" type for storing dates as timestamps.\n\n      if (isDateTimestamp(value, getStyleId(), styles, options)) {\n        // Parse the number as a date timestamp.\n        value = parseDate(value, properties);\n      }\n\n      break;\n\n    default:\n      throw new TypeError(\"Cell type not supported: \".concat(type));\n  } // Convert empty values to `null`.\n\n\n  if (value === undefined) {\n    value = null;\n  }\n\n  return value;\n} // Decodes numeric error code to a string code.\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n\nfunction decodeError(errorCode) {\n  // While the error values are determined by the application,\n  // the following are some example error values that could be used:\n  switch (errorCode) {\n    case 0x00:\n      return '#NULL!';\n\n    case 0x07:\n      return '#DIV/0!';\n\n    case 0x0F:\n      return '#VALUE!';\n\n    case 0x17:\n      return '#REF!';\n\n    case 0x1D:\n      return '#NAME?';\n\n    case 0x24:\n      return '#NUM!';\n\n    case 0x2A:\n      return '#N/A';\n\n    case 0x2B:\n      return '#GETTING_DATA';\n\n    default:\n      // Such error code doesn't exist. I made it up.\n      return \"#ERROR_\".concat(errorCode);\n  }\n}\n\nfunction parseString(value, options) {\n  // In some weird cases, a developer might want to disable\n  // the automatic trimming of all strings.\n  // For example, leading spaces might express a tree-like hierarchy.\n  // https://github.com/catamphetamine/read-excel-file/pull/106#issuecomment-1136062917\n  if (options.trim !== false) {\n    value = value.trim();\n  }\n\n  if (value === '') {\n    value = undefined;\n  }\n\n  return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}