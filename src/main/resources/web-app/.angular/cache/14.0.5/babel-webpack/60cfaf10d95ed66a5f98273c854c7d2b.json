{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n} // XLSX does have \"d\" type for dates, but it's not commonly used.\n// Instead, it prefers using \"n\" type for storing dates as timestamps.\n//\n// Whether a numeric value is a number or a date timestamp, it sometimes could be\n// detected by looking at the value \"format\" and seeing if it's a date-specific one.\n// https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n//\n// The list of generic numeric value \"formats\":\n// https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\n//\n\n\nexport default function isDateTimestamp(value, styleId, styles, options) {\n  if (styleId) {\n    var style = styles[styleId];\n\n    if (!style) {\n      throw new Error(\"Cell style not found: \".concat(styleId));\n    }\n\n    if ( // Whether it's a \"number format\" that's conventionally used for storing date timestamps.\n    BUILT_IN_DATE_NUMBER_FORMAT_IDS.indexOf(parseInt(style.numberFormat.id)) >= 0 || // Whether it's a \"number format\" that uses a \"formatting template\"\n    // that the developer is certain is a date formatting template.\n    options.dateFormat && style.numberFormat.template === options.dateFormat || // Whether the \"smart formatting template\" feature is not disabled\n    // and it has detected that it's a date formatting template by looking at it.\n    options.smartDateParser !== false && style.numberFormat.template && isDateTemplate(style.numberFormat.template)) {\n      return true;\n    }\n  }\n} // https://hexdocs.pm/xlsxir/number_styles.html\n\nvar BUILT_IN_DATE_NUMBER_FORMAT_IDS = [14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 36, 45, 46, 47, 50, 57]; // On some date formats, there's an \"[$-414]\" prefix.\n// I don't have any idea what that is.\n//\n// https://stackoverflow.com/questions/4730152/what-indicates-an-office-open-xml-cell-contains-a-date-time-value\n//\n// Examples:\n//\n// * 27 (built-in format) \"[$-404]e/m/d\"\n// * 164 (custom format) \"[$-414]mmmm\\ yyyy;@\"\n//\n\nvar DATE_FORMAT_WEIRD_PREFIX = /^\\[\\$-414\\]/; // On some date formats, there's an \";@\" postfix.\n// I don't have any idea what that is.\n// Examples:\n//\n// * 164 (custom format) \"m/d/yyyy;@\"\n// * 164 (custom format) \"[$-414]mmmm\\ yyyy;@\"\n//\n\nvar DATE_FORMAT_WEIRD_POSTFIX = /;@$/;\n\nfunction isDateTemplate(template) {\n  // Date format tokens could be in upper case or in lower case.\n  // There seems to be no single standard.\n  // So lowercase the template first.\n  template = template.toLowerCase(); // On some date formats, there's an \"[$-414]\" prefix.\n  // I don't have any idea what that is. Trim it.\n\n  template = template.replace(DATE_FORMAT_WEIRD_PREFIX, ''); // On some date formats, there's an \";@\" postfix.\n  // I don't have any idea what that is. Trim it.\n\n  template = template.replace(DATE_FORMAT_WEIRD_POSTFIX, '');\n  var tokens = template.split(/\\W+/);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {\n    var token = _step.value;\n\n    if (DATE_TEMPLATE_TOKENS.indexOf(token) < 0) {\n      return false;\n    }\n  }\n\n  return true;\n} // These tokens could be in upper case or in lower case.\n// There seems to be no single standard, so using lower case.\n\n\nvar DATE_TEMPLATE_TOKENS = [// Seconds (min two digits). Example: \"05\".\n'ss', // Minutes (min two digits). Example: \"05\". Could also be \"Months\". Weird.\n'mm', // Hours. Example: \"1\".\n'h', // Hours (min two digits). Example: \"01\".\n'hh', // \"AM\" part of \"AM/PM\". Lowercased just in case.\n'am', // \"PM\" part of \"AM/PM\". Lowercased just in case.\n'pm', // Day. Example: \"1\"\n'd', // Day (min two digits). Example: \"01\"\n'dd', // Month (numeric). Example: \"1\".\n'm', // Month (numeric, min two digits). Example: \"01\". Could also be \"Minutes\". Weird.\n'mm', // Month (shortened month name). Example: \"Jan\".\n'mmm', // Month (full month name). Example: \"January\".\n'mmmm', // Two-digit year. Example: \"20\".\n'yy', // Full year. Example: \"2020\".\n'yyyy', // I don't have any idea what \"e\" means.\n// It's used in \"built-in\" XLSX formats:\n// * 27 '[$-404]e/m/d';\n// * 36 '[$-404]e/m/d';\n// * 50 '[$-404]e/m/d';\n// * 57 '[$-404]e/m/d';\n'e'];","map":{"version":3,"names":["_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","minLen","_arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","isDateTimestamp","styleId","styles","options","style","Error","concat","BUILT_IN_DATE_NUMBER_FORMAT_IDS","indexOf","parseInt","numberFormat","id","dateFormat","template","smartDateParser","isDateTemplate","DATE_FORMAT_WEIRD_PREFIX","DATE_FORMAT_WEIRD_POSTFIX","toLowerCase","replace","tokens","split","_iterator","_step","token","DATE_TEMPLATE_TOKENS"],"sources":["C:/Users/Elfar/Desktop/tik/Codingias/src/main/resources/web-app/node_modules/read-excel-file/modules/read/isDateTimestamp.js"],"sourcesContent":["function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// XLSX does have \"d\" type for dates, but it's not commonly used.\n// Instead, it prefers using \"n\" type for storing dates as timestamps.\n//\n// Whether a numeric value is a number or a date timestamp, it sometimes could be\n// detected by looking at the value \"format\" and seeing if it's a date-specific one.\n// https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n//\n// The list of generic numeric value \"formats\":\n// https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\n//\nexport default function isDateTimestamp(value, styleId, styles, options) {\n  if (styleId) {\n    var style = styles[styleId];\n\n    if (!style) {\n      throw new Error(\"Cell style not found: \".concat(styleId));\n    }\n\n    if ( // Whether it's a \"number format\" that's conventionally used for storing date timestamps.\n    BUILT_IN_DATE_NUMBER_FORMAT_IDS.indexOf(parseInt(style.numberFormat.id)) >= 0 || // Whether it's a \"number format\" that uses a \"formatting template\"\n    // that the developer is certain is a date formatting template.\n    options.dateFormat && style.numberFormat.template === options.dateFormat || // Whether the \"smart formatting template\" feature is not disabled\n    // and it has detected that it's a date formatting template by looking at it.\n    options.smartDateParser !== false && style.numberFormat.template && isDateTemplate(style.numberFormat.template)) {\n      return true;\n    }\n  }\n} // https://hexdocs.pm/xlsxir/number_styles.html\n\nvar BUILT_IN_DATE_NUMBER_FORMAT_IDS = [14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 36, 45, 46, 47, 50, 57]; // On some date formats, there's an \"[$-414]\" prefix.\n// I don't have any idea what that is.\n//\n// https://stackoverflow.com/questions/4730152/what-indicates-an-office-open-xml-cell-contains-a-date-time-value\n//\n// Examples:\n//\n// * 27 (built-in format) \"[$-404]e/m/d\"\n// * 164 (custom format) \"[$-414]mmmm\\ yyyy;@\"\n//\n\nvar DATE_FORMAT_WEIRD_PREFIX = /^\\[\\$-414\\]/; // On some date formats, there's an \";@\" postfix.\n// I don't have any idea what that is.\n// Examples:\n//\n// * 164 (custom format) \"m/d/yyyy;@\"\n// * 164 (custom format) \"[$-414]mmmm\\ yyyy;@\"\n//\n\nvar DATE_FORMAT_WEIRD_POSTFIX = /;@$/;\n\nfunction isDateTemplate(template) {\n  // Date format tokens could be in upper case or in lower case.\n  // There seems to be no single standard.\n  // So lowercase the template first.\n  template = template.toLowerCase(); // On some date formats, there's an \"[$-414]\" prefix.\n  // I don't have any idea what that is. Trim it.\n\n  template = template.replace(DATE_FORMAT_WEIRD_PREFIX, ''); // On some date formats, there's an \";@\" postfix.\n  // I don't have any idea what that is. Trim it.\n\n  template = template.replace(DATE_FORMAT_WEIRD_POSTFIX, '');\n  var tokens = template.split(/\\W+/);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {\n    var token = _step.value;\n\n    if (DATE_TEMPLATE_TOKENS.indexOf(token) < 0) {\n      return false;\n    }\n  }\n\n  return true;\n} // These tokens could be in upper case or in lower case.\n// There seems to be no single standard, so using lower case.\n\n\nvar DATE_TEMPLATE_TOKENS = [// Seconds (min two digits). Example: \"05\".\n'ss', // Minutes (min two digits). Example: \"05\". Could also be \"Months\". Weird.\n'mm', // Hours. Example: \"1\".\n'h', // Hours (min two digits). Example: \"01\".\n'hh', // \"AM\" part of \"AM/PM\". Lowercased just in case.\n'am', // \"PM\" part of \"AM/PM\". Lowercased just in case.\n'pm', // Day. Example: \"1\"\n'd', // Day (min two digits). Example: \"01\"\n'dd', // Month (numeric). Example: \"1\".\n'm', // Month (numeric, min two digits). Example: \"01\". Could also be \"Minutes\". Weird.\n'mm', // Month (shortened month name). Example: \"Jan\".\n'mmm', // Month (full month name). Example: \"January\".\n'mmmm', // Two-digit year. Example: \"20\".\n'yy', // Full year. Example: \"2020\".\n'yyyy', // I don't have any idea what \"e\" means.\n// It's used in \"built-in\" XLSX formats:\n// * 27 '[$-404]e/m/d';\n// * 36 '[$-404]e/m/d';\n// * 50 '[$-404]e/m/d';\n// * 57 '[$-404]e/m/d';\n'e'];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}