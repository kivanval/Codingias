{"ast":null,"code":"export function findChild(node, tagName) {\n  var i = 0;\n\n  while (i < node.childNodes.length) {\n    var childNode = node.childNodes[i]; // `nodeType: 1` means \"Element\".\n    // https://www.w3schools.com/xml/prop_element_nodetype.asp\n\n    if (childNode.nodeType === 1 && getTagName(childNode) === tagName) {\n      return childNode;\n    }\n\n    i++;\n  }\n}\nexport function findChildren(node, tagName) {\n  var results = [];\n  var i = 0;\n\n  while (i < node.childNodes.length) {\n    var childNode = node.childNodes[i]; // `nodeType: 1` means \"Element\".\n    // https://www.w3schools.com/xml/prop_element_nodetype.asp\n\n    if (childNode.nodeType === 1 && getTagName(childNode) === tagName) {\n      results.push(childNode);\n    }\n\n    i++;\n  }\n\n  return results;\n}\nexport function forEach(node, tagName, func) {\n  // if (typeof tagName === 'function') {\n  // \tfunc = tagName\n  // \ttagName = undefined\n  // }\n  var i = 0;\n\n  while (i < node.childNodes.length) {\n    var childNode = node.childNodes[i];\n\n    if (tagName) {\n      // `nodeType: 1` means \"Element\".\n      // https://www.w3schools.com/xml/prop_element_nodetype.asp\n      if (childNode.nodeType === 1 && getTagName(childNode) === tagName) {\n        func(childNode, i);\n      }\n    } else {\n      func(childNode, i);\n    }\n\n    i++;\n  }\n}\nexport function map(node, tagName, func) {\n  var results = [];\n  forEach(node, tagName, function (node, i) {\n    results.push(func(node, i));\n  });\n  return results;\n}\nvar NAMESPACE_REG_EXP = /.+\\:/;\nexport function getTagName(element) {\n  // For some weird reason, if an element is declared as,\n  // for example, `<x:sheets/>`, then its `.tagName` will be\n  // \"x:sheets\" instead of just \"sheets\".\n  // https://gitlab.com/catamphetamine/read-excel-file/-/issues/25\n  // Its not clear how to tell it to ignore any namespaces\n  // when getting `.tagName`, so just replacing anything\n  // before a colon, if any.\n  return element.tagName.replace(NAMESPACE_REG_EXP, '');\n} // This function is only used for occasional debug messages.\n\nexport function getOuterXml(node) {\n  // `nodeType: 1` means \"Element\".\n  // https://www.w3schools.com/xml/prop_element_nodetype.asp\n  if (node.nodeType !== 1) {\n    return node.textContent;\n  }\n\n  var xml = '<' + getTagName(node);\n  var j = 0;\n\n  while (j < node.attributes.length) {\n    xml += ' ' + node.attributes[j].name + '=' + '\"' + node.attributes[j].value + '\"';\n    j++;\n  }\n\n  xml += '>';\n  var i = 0;\n\n  while (i < node.childNodes.length) {\n    xml += getOuterXml(node.childNodes[i]);\n    i++;\n  }\n\n  xml += '</' + getTagName(node) + '>';\n  return xml;\n}","map":{"version":3,"names":["findChild","node","tagName","i","childNodes","length","childNode","nodeType","getTagName","findChildren","results","push","forEach","func","map","NAMESPACE_REG_EXP","element","replace","getOuterXml","textContent","xml","j","attributes","name","value"],"sources":["C:/Users/Elfar/Desktop/tik/Codingias/src/main/resources/web-app/node_modules/read-excel-file/modules/xml/dom.js"],"sourcesContent":["export function findChild(node, tagName) {\n  var i = 0;\n\n  while (i < node.childNodes.length) {\n    var childNode = node.childNodes[i]; // `nodeType: 1` means \"Element\".\n    // https://www.w3schools.com/xml/prop_element_nodetype.asp\n\n    if (childNode.nodeType === 1 && getTagName(childNode) === tagName) {\n      return childNode;\n    }\n\n    i++;\n  }\n}\nexport function findChildren(node, tagName) {\n  var results = [];\n  var i = 0;\n\n  while (i < node.childNodes.length) {\n    var childNode = node.childNodes[i]; // `nodeType: 1` means \"Element\".\n    // https://www.w3schools.com/xml/prop_element_nodetype.asp\n\n    if (childNode.nodeType === 1 && getTagName(childNode) === tagName) {\n      results.push(childNode);\n    }\n\n    i++;\n  }\n\n  return results;\n}\nexport function forEach(node, tagName, func) {\n  // if (typeof tagName === 'function') {\n  // \tfunc = tagName\n  // \ttagName = undefined\n  // }\n  var i = 0;\n\n  while (i < node.childNodes.length) {\n    var childNode = node.childNodes[i];\n\n    if (tagName) {\n      // `nodeType: 1` means \"Element\".\n      // https://www.w3schools.com/xml/prop_element_nodetype.asp\n      if (childNode.nodeType === 1 && getTagName(childNode) === tagName) {\n        func(childNode, i);\n      }\n    } else {\n      func(childNode, i);\n    }\n\n    i++;\n  }\n}\nexport function map(node, tagName, func) {\n  var results = [];\n  forEach(node, tagName, function (node, i) {\n    results.push(func(node, i));\n  });\n  return results;\n}\nvar NAMESPACE_REG_EXP = /.+\\:/;\nexport function getTagName(element) {\n  // For some weird reason, if an element is declared as,\n  // for example, `<x:sheets/>`, then its `.tagName` will be\n  // \"x:sheets\" instead of just \"sheets\".\n  // https://gitlab.com/catamphetamine/read-excel-file/-/issues/25\n  // Its not clear how to tell it to ignore any namespaces\n  // when getting `.tagName`, so just replacing anything\n  // before a colon, if any.\n  return element.tagName.replace(NAMESPACE_REG_EXP, '');\n} // This function is only used for occasional debug messages.\n\nexport function getOuterXml(node) {\n  // `nodeType: 1` means \"Element\".\n  // https://www.w3schools.com/xml/prop_element_nodetype.asp\n  if (node.nodeType !== 1) {\n    return node.textContent;\n  }\n\n  var xml = '<' + getTagName(node);\n  var j = 0;\n\n  while (j < node.attributes.length) {\n    xml += ' ' + node.attributes[j].name + '=' + '\"' + node.attributes[j].value + '\"';\n    j++;\n  }\n\n  xml += '>';\n  var i = 0;\n\n  while (i < node.childNodes.length) {\n    xml += getOuterXml(node.childNodes[i]);\n    i++;\n  }\n\n  xml += '</' + getTagName(node) + '>';\n  return xml;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}